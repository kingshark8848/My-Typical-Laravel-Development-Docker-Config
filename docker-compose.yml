version: '3'

#Docker Networks
networks:
    api_crm:
      driver: bridge

# persist db data
# volumes:
#     mysql_data:
#         driver: local

services:

    elasticsearch:
        container_name: es01
        build: ./docker-config/elasticsearch
        ports:
          - "9200:9200"
          - "9300:9300"
        restart: always
        volumes:
            - ./docker-data/es:/usr/share/elasticsearch/data
        networks: 
            - api_crm
        environment:
            - node.name=es01
            - cluster.name=es-docker-cluster
            - discovery.type=single-node
    
    redis-db:
        container_name: redis01
        build: ./docker-config/redis
        restart: always
        ports: 
            - "6379:6379"
        volumes: 
            - ./docker-data/redis:/data
        networks: 
            - api_crm

    # MySql
    mysql:
        container_name: mysql
        build: ./docker-config/mysql
        restart: unless-stopped
        tty: true
        ports:
            - '33060:3306'
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: logix_crm
            MYSQL_USER: app
            MYSQL_PASSWORD: app123
        volumes:
            - ./docker-data/mysql:/var/lib/mysql:rw
            - ./docker-config/mysql/my.cnf:/etc/mysql/my.cnf
        networks:
            - api_crm

    # PHP Service
    php-fpm:
        container_name: php-fpm
        build: ./docker-config/php
        restart: unless-stopped
        tty: true
        volumes:
            - ./src:/var/www
            - ./docker-config/php/php.ini:/usr/local/etc/php/php.ini
        working_dir: /var/www
        ports:
            - '9091:9000'
        environment:
            XDEBUG_CONFIG: "remote_host=host.docker.internal"
            PHP_IDE_CONFIG: "serverName=api_logix_crm-docker"
        # env_file: 
        #     - ./src/.env
        networks:
            - api_crm
        depends_on:
            - mysql
            - elasticsearch
            - redis-db
            - kafka-1
            - kafka-2
        entrypoint: /home/docker-entrypoint.sh

    # Nginx
    nginx:
        image: nginx:stable-alpine
        container_name: nginx
        volumes: 
            - ./src:/var/www
            - ./docker-config/nginx/conf.d/api_logix_crm.conf:/etc/nginx/conf.d/default.conf
        ports:
            - '8080:80'
        depends_on: 
            - php-fpm
        networks:
            - api_crm


    zookeeper:
        image: bitnami/zookeeper:latest
        hostname: zookeeper
        privileged: true
        environment:
            ALLOW_ANONYMOUS_LOGIN: "yes"
            ZOO_AUTOPURGE_INTERVAL: 1
            ZOO_AUTOPURGE_RETAIN_COUNT: 3
        volumes:
            - ./docker-data/zookeeper/data:/bitnami/zookeeper
#            - ./docker-config/zookeeper/zoo.cfg:/opt/bitnami/zookeeper/conf/zoo.cfg
        ports:
            - "2181:2181"
        networks:
            - api_crm


    kafka-1:
        image: wurstmeister/kafka
        ports:
            - "9095:9092"
        environment:
            KAFKA_ADVERTISED_HOST_NAME:  192.168.0.200
            KAFKA_ADVERTISED_PORT: 9095
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LOG_DIRS: /kafka/logs
            KAFKA_BROKER_ID: 500
            KAFKA_offsets_topic_replication_factor: 2
        volumes:
            - ./docker-data/kafka/var/run/docker.sock:/var/run/docker.sock
            - ./docker-data/kafka/broker_500:/kafka
        networks:
            - api_crm
        depends_on:
            - zookeeper

    kafka-2:
        image: wurstmeister/kafka
        ports:
            - "9096:9092"
        environment:
            KAFKA_ADVERTISED_HOST_NAME:  192.168.0.200
            KAFKA_ADVERTISED_PORT: 9096
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LOG_DIRS: /kafka/logs
            KAFKA_BROKER_ID: 501
            KAFKA_offsets_topic_replication_factor: 2
        volumes:
            - ./docker-data/kafka/var/run/docker.sock:/var/run/docker.sock
            - ./docker-data/kafka/broker_501:/kafka
        networks:
            - api_crm
        depends_on:
            - zookeeper